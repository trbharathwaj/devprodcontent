description: Use as a sub-playbook to dump memory if given process is running on legacy
  AD agent
id: Accessdata_Dump_memory_for_malicious_process
inputs:
- description: ""
  key: target_ip
  required: true
  value: {}
- description: ""
  key: process_name
  required: true
  value: {}
name: 'Accessdata: Dump memory for malicious process'
outputs:
- contextPath: Accessdata.IsProcessDetected
  description: Indicates if the process with the specified name was detected on the
    agent machine during playbook execution.
  type: boolean
- contextPath: Accessdata.MemoryDumpPath
  description: The path for the created memory dump file (if not created, it will
    be an empty string).
  type: string
starttaskid: "0"
system: true
tasks:
  "0":
    id: "0"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "22"
    note: false
    separatecontext: false
    task:
      brand: ""
      description: Playbook entry point
      id: 8ad54dd6-b579-41ef-81da-1423e2aa8f4f
      iscommand: false
      name: ""
      version: -1
    taskid: 8ad54dd6-b579-41ef-81da-1423e2aa8f4f
    timertriggers: []
    type: start
    view: |-
      {
        "position": {
          "x": 50,
          "y": 100
        }
      }
  "1":
    id: "1"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "15"
    note: false
    scriptarguments:
      caseid: {}
      target_ip:
        simple: ${inputs.target_ip}
    separatecontext: false
    task:
      brand: ""
      description: Calls a command to get the process list from the legacy agent.
      id: 1b11d33b-fb1d-4221-8667-a362933d726c
      iscommand: true
      name: Get process list from legacy agent
      script: '|||accessdata-legacyagent-get-processlist'
      type: regular
      version: -1
    taskid: 1b11d33b-fb1d-4221-8667-a362933d726c
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 50,
          "y": 290
        }
      }
  "7":
    id: "7"
    ignoreworker: false
    note: false
    separatecontext: false
    task:
      brand: ""
      description: Playbook exit point
      id: 15ba3de3-acd0-4849-8f4c-6e9c37a559d2
      iscommand: false
      name: Done
      type: title
      version: -1
    taskid: 15ba3de3-acd0-4849-8f4c-6e9c37a559d2
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 50,
          "y": 1715
        }
      }
  "10":
    id: "10"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "11"
    note: false
    scriptarguments:
      filepath:
        simple: ${Accessdata.Job.Result}
    separatecontext: false
    task:
      brand: Accessdata
      description: Reads a file from a case folder and saves the content in the current
        context.
      id: 0365d043-19bd-4a7d-8b65-d80671d992fa
      iscommand: true
      name: Read snapshot file from case folder
      script: Accessdata|||accessdata-read-casefile
      type: regular
      version: -1
    taskid: 0365d043-19bd-4a7d-8b65-d80671d992fa
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 50,
          "y": 740
        }
      }
  "11":
    id: "11"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "21"
    note: false
    scriptarguments:
      filepath:
        simple: ${Accessdata.Job.Result}
      process:
        simple: ${inputs.process_name}
    separatecontext: false
    task:
      brand: ""
      description: Reads the content of an XML file from context, converts it to a
        JSON file and checks if the given filename exists in the process list. Returns
        yes or no.
      id: fd34f7f1-972f-4e34-8f9b-48e11804b387
      iscommand: false
      name: Check if process exists in process list
      script: AccessdataCheckProcessExistsInSnapshot
      type: regular
      version: -1
    taskid: fd34f7f1-972f-4e34-8f9b-48e11804b387
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 50,
          "y": 895
        }
      }
  "12":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              simple: Accessdata.Process.Exists
          operator: isEqualString
          right:
            value:
              simple: "Yes"
      label: "yes"
    id: "12"
    ignoreworker: false
    nexttasks:
      '#default#':
      - "7"
      "yes":
      - "13"
    note: false
    separatecontext: false
    task:
      brand: ""
      description: Simple conditional task
      id: e1963d53-5ffe-47ff-8d5c-1e54e247969f
      iscommand: false
      name: Does the process exist?
      type: condition
      version: -1
    taskid: e1963d53-5ffe-47ff-8d5c-1e54e247969f
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 50,
          "y": 1100
        }
      }
  "13":
    id: "13"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "17"
    note: false
    scriptarguments:
      caseid:
        simple: ${Accessdata.Job.CaseID}
      target_ip:
        simple: ${inputs.target_ip}
    separatecontext: false
    task:
      brand: Accessdata
      description: Creates a legacy agent memory dump.
      id: 09962146-a8e3-4071-829a-898189f4ac1e
      iscommand: true
      name: Create memory dump job
      script: Accessdata|||accessdata-legacyagent-get-memorydump
      type: regular
      version: -1
    taskid: 09962146-a8e3-4071-829a-898189f4ac1e
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 350,
          "y": 1240
        }
      }
  "15":
    id: "15"
    ignoreworker: false
    loop:
      exitCondition: ""
      iscommand: false
      wait: 1
    nexttasks:
      '#none#':
      - "19"
    note: false
    scriptarguments:
      Ids:
        simple: ${Accessdata.Job.CaseJobID}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: caseJobID
      PollingCommandName:
        simple: accessdata-jobstatus-scan
      Timeout:
        simple: "60"
      dt:
        simple: Accessdata.Job(val.State !== 'Finished' && val.State !== 'Success'
          && val.State !== 'Completed' && val.State !== 'Failed').CaseJobID
    separatecontext: true
    task:
      brand: ""
      description: |-
        Use as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continually running the command in Step #2 until the operation completes.
        The remote action must have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      id: 11cc66b1-ae41-4139-89cc-49943dfda1eb
      iscommand: false
      name: GenericPolling
      playbookId: GenericPolling
      type: playbook
      version: -1
    taskid: 11cc66b1-ae41-4139-89cc-49943dfda1eb
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 50,
          "y": 440
        }
      }
  "17":
    id: "17"
    ignoreworker: false
    loop:
      exitCondition: ""
      iscommand: false
      wait: 1
    nexttasks:
      '#none#':
      - "20"
    note: false
    scriptarguments:
      Ids:
        simple: ${Accessdata.Job.CaseJobID}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: caseJobID
      PollingCommandName:
        simple: accessdata-jobstatus-scan
      Timeout:
        simple: "60"
      dt:
        simple: Accessdata.Job(val.State !== 'Finished' && val.State !== 'Success'
          && val.State !== 'Completed' && val.State !== 'Failed').CaseJobID
    separatecontext: true
    task:
      brand: ""
      description: |-
        Use as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continually running the command in Step #2 until the operation completes.
        The remote action must have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      id: 53865ec2-0f43-4b60-813b-3708fa2bf2da
      iscommand: false
      name: GenericPolling
      playbookId: GenericPolling
      type: playbook
      version: -1
    taskid: 53865ec2-0f43-4b60-813b-3708fa2bf2da
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 350,
          "y": 1390
        }
      }
  "19":
    id: "19"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "10"
    note: false
    scriptarguments:
      caseID:
        simple: ${Accessdata.Job.CaseID}
      jobID:
        simple: ${Accessdata.Job(val.Type=="Volatile").ID}
    separatecontext: false
    task:
      brand: Accessdata
      description: Returns the snapshot path from a result of the process list job.
      id: 7a1d37fe-21c2-4eea-8c1c-f55044720bff
      iscommand: true
      name: Get process list job result
      script: Accessdata|||accessdata-get-jobstatus-processlist
      type: regular
      version: -1
    taskid: 7a1d37fe-21c2-4eea-8c1c-f55044720bff
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 50,
          "y": 590
        }
      }
  "20":
    id: "20"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "24"
    note: false
    scriptarguments:
      caseID:
        simple: ${Accessdata.Job.CaseID}
      jobID:
        simple: ${Accessdata.Job(val.Type=="LegacyMemoryDump").ID}
    separatecontext: false
    task:
      brand: Accessdata
      description: Returns the memory dump path from the result of the memory dump
        job.
      id: 19ad4cc8-0740-40f6-8f6e-cf335fd4aad5
      iscommand: true
      name: Get memory dump job result
      script: Accessdata|||accessdata-get-jobstatus-memorydump
      type: regular
      version: -1
    taskid: 19ad4cc8-0740-40f6-8f6e-cf335fd4aad5
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 350,
          "y": 1545
        }
      }
  "21":
    id: "21"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "12"
    note: false
    scriptarguments:
      append: {}
      key:
        simple: Accessdata.IsProcessDetected
      value:
        simple: ${Accessdata.Process.Exists}
    separatecontext: false
    task:
      brand: ""
      description: Sets a value into the context with the given context key.
      id: 35cd342f-88f0-495d-8387-5dc6913e8a05
      iscommand: false
      name: Set playbook output IsProcessDetected
      script: Set
      type: regular
      version: -1
    taskid: 35cd342f-88f0-495d-8387-5dc6913e8a05
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -400,
          "y": 980
        }
      }
  "22":
    id: "22"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "23"
    note: false
    scriptarguments:
      append: {}
      key:
        simple: Accessdata.IsProcessDetected
      value:
        simple: "No"
    separatecontext: false
    task:
      brand: ""
      description: Sets a value into the context with the given context key.
      id: 9c7fc126-a4e2-46e4-895c-63d249ff5ceb
      iscommand: false
      name: Init playbook output IsProcessDetected
      script: Set
      type: regular
      version: -1
    taskid: 9c7fc126-a4e2-46e4-895c-63d249ff5ceb
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -430,
          "y": 195
        }
      }
  "23":
    id: "23"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "1"
    note: false
    scriptarguments:
      append: {}
      key:
        simple: Accessdata.MemoryDumpPath
      value:
        simple: '""'
    separatecontext: false
    task:
      brand: ""
      description: Sets a value into the context with the given context key.
      id: 162e9bce-45c4-47c2-880d-455c549a6fb8
      iscommand: false
      name: Init playbook output MemoryDumpPath
      script: Set
      type: regular
      version: -1
    taskid: 162e9bce-45c4-47c2-880d-455c549a6fb8
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -430,
          "y": 375
        }
      }
  "24":
    id: "24"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "7"
    note: false
    scriptarguments:
      append: {}
      key:
        simple: Accessdata.MemoryDumpPath
      value:
        simple: ${Accessdata.Job(val.Type=="LegacyMemoryDump").Result}
    separatecontext: false
    task:
      brand: ""
      description: Sets a value into the context with the given context key.
      id: ee6fd151-a9ce-4908-81a0-245e8dd9b498
      iscommand: false
      name: Set playbook output MemoryDumpPath
      script: Set
      type: regular
      version: -1
    taskid: ee6fd151-a9ce-4908-81a0-245e8dd9b498
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 540,
          "y": 1715
        }
      }
version: -1
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1710,
        "width": 1350,
        "x": -430,
        "y": 100
      }
    }
  }
