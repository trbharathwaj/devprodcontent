description: |-
  This playbook remediates the Prisma Cloud AWS EC2 alerts generated by the following policies:
   - AWS Default Security Group Does Not Restrict All Traffic
   - AWS Security Groups Allow Internet Traffic
   - AWS Security Groups With Inbound Rule Overly Permissive To All Traffic
id: Prisma Cloud Remediation - AWS EC2 Security Group Misconfiguration
inputs:
- description: Provides the Prisma Cloud policy Id.
  key: policyId
  required: true
  value: {}
name: Prisma Cloud Remediation - AWS EC2 Security Group Misconfiguration
outputs: []
starttaskid: "0"
system: true
tasks:
  "0":
    id: "0"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "2"
    note: false
    separatecontext: false
    task:
      brand: ""
      id: 92a448cc-b058-4323-8821-bd598d893d29
      iscommand: false
      name: ""
      version: -1
    taskid: 92a448cc-b058-4323-8821-bd598d893d29
    timertriggers: []
    type: start
    view: |-
      {
        "position": {
          "x": 450,
          "y": -90
        }
      }
  "2":
    id: "2"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "15"
    note: false
    scriptarguments:
      filters: {}
      groupIds:
        complex:
          accessor: labels.resource
          root: incident
          transformers:
          - operator: ParseJSON
          - args:
              field:
                value:
                  simple: data
            operator: getField
          - args:
              field:
                value:
                  simple: groupId
            operator: getField
      groupNames: {}
      region:
        complex:
          accessor: labels.resource
          root: incident
          transformers:
          - operator: ParseJSON
          - args:
              field:
                value:
                  simple: regionId
            operator: getField
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
    separatecontext: false
    task:
      brand: ""
      description: Describes one or more of the security groups.
      id: d0b6286b-9877-4b2b-84c7-90c6e2a0c1e8
      iscommand: true
      name: Get security group details
      script: '|||aws-ec2-describe-security-groups'
      type: regular
      version: -1
    taskid: d0b6286b-9877-4b2b-84c7-90c6e2a0c1e8
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 450,
          "y": 50
        }
      }
  "3":
    continueonerror: true
    id: "3"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "12"
    note: false
    scriptarguments:
      cidrIp:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.IpRanges.CidrIp
          root: AWS
      fromPort:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.FromPort
          root: AWS
      groupId:
        complex:
          accessor: EC2.SecurityGroups.GroupId
          root: AWS
      ipProtocol:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.IpProtocol
          root: AWS
      region:
        complex:
          accessor: labels.resource
          root: incident
          transformers:
          - operator: ParseJSON
          - args:
              field:
                value:
                  simple: regionId
            operator: getField
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
      sourceSecurityGroupName:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.UserIdGroupPairs.GroupName
          root: AWS
      toPort:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.ToPort
          root: AWS
    separatecontext: false
    task:
      brand: ""
      description: Removes ingress rules from a security group. To remove a rule,
        the values that you specify (for example, ports) must match the existing rules'
        values exactly.
      id: 5a0fe336-4d38-4c7d-8250-b7165f183d8e
      iscommand: true
      name: Revoke all security group ingress rules
      script: '|||aws-ec2-revoke-security-group-ingress-rule'
      type: regular
      version: -1
    taskid: 5a0fe336-4d38-4c7d-8250-b7165f183d8e
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 1140,
          "y": 710
        }
      }
  "9":
    id: "9"
    ignoreworker: false
    note: false
    separatecontext: false
    task:
      brand: ""
      id: 1cf94ac2-9dfe-48c6-8fef-8deabb65238a
      iscommand: false
      name: Done
      type: title
      version: -1
    taskid: 1cf94ac2-9dfe-48c6-8fef-8deabb65238a
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 540,
          "y": 1500
        }
      }
  "12":
    id: "12"
    ignoreworker: false
    nexttasks:
      "no":
      - "9"
      "yes":
      - "20"
    note: false
    scriptarguments:
      entryId:
        simple: ${lastCompletedTaskEntries}
    separatecontext: false
    task:
      brand: ""
      description: Checks whether given entries returned an error. Use ${lastCompletedTaskEntries}
        to check the previous task entries. If an array is provided, a value of yes
        indicates that one of the entries returned an error.
      id: bb7658d0-6f23-46c1-8b3d-ad0cbbee43ef
      iscommand: false
      name: Did we encounter an error?
      script: isError
      type: condition
      version: -1
    taskid: bb7658d0-6f23-46c1-8b3d-ad0cbbee43ef
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 1140,
          "y": 910
        }
      }
  "14":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                accessor: EC2.SecurityGroups.GroupName
                root: AWS
          operator: isEqualString
          right:
            value:
              simple: default
      label: "yes"
    id: "14"
    ignoreworker: false
    nexttasks:
      '#default#':
      - "20"
      "yes":
      - "3"
    note: false
    separatecontext: false
    task:
      brand: ""
      description: Check whether the VPC security group is the default.  If not, manually
        define a default security group.
      id: 8576666e-db4d-465f-825e-4b105d48068d
      iscommand: false
      name: Is there a default security group?
      type: condition
      version: -1
    taskid: 8576666e-db4d-465f-825e-4b105d48068d
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 950,
          "y": 540
        }
      }
  "15":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                root: inputs.policyId
          operator: isEqualString
          right:
            value:
              simple: 2378dbf4-b104-4bda-9b05-7417affbba3f
      label: defaultSG
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                root: inputs.policyId
          operator: isEqualString
          right:
            value:
              simple: 2dbda57f-33d4-459a-97ae-dec7e81f9ec4
      label: pubTraffic
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                root: inputs.policyId
          operator: isEqualString
          right:
            value:
              simple: 566686e8-0581-4df5-ae22-5a901ed37b58
      label: permissive
    id: "15"
    ignoreworker: false
    nexttasks:
      defaultSG:
      - "27"
      permissive:
      - "25"
      pubTraffic:
      - "26"
    note: false
    separatecontext: false
    task:
      brand: ""
      description: Remediate the appropriate Prisma Cloud policy based on the policy
        Id.
      id: 0fc57cf4-69bc-480c-8282-4d8b570717a1
      iscommand: false
      name: Execute remediation
      type: condition
      version: -1
    taskid: 0fc57cf4-69bc-480c-8282-4d8b570717a1
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 450,
          "y": 220
        }
      }
  "16":
    continueonerror: true
    id: "16"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "24"
    note: false
    scriptarguments:
      cidrIp:
        simple: 0.0.0.0/0
      fromPort:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.FromPort
          root: AWS
      groupId:
        complex:
          accessor: EC2.SecurityGroups.GroupId
          root: AWS
      ipProtocol:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.IpProtocol
          root: AWS
      region:
        complex:
          accessor: labels.resource
          root: incident
          transformers:
          - operator: ParseJSON
          - args:
              field:
                value:
                  simple: regionId
            operator: getField
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
      sourceSecurityGroupName: {}
      toPort:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.ToPort
          root: AWS
    separatecontext: false
    task:
      brand: ""
      description: Removes an ingress rule from a security group. To remove a rule,
        the values that you specify (for example, ports) must match the existing rule's
        values exactly.
      id: 2cd3d451-40c9-4633-87f2-b4e28aef4600
      iscommand: true
      name: Revoke a public security group ingress rule
      script: '|||aws-ec2-revoke-security-group-ingress-rule'
      type: regular
      version: -1
    taskid: 2cd3d451-40c9-4633-87f2-b4e28aef4600
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 450,
          "y": 635
        }
      }
  "18":
    id: "18"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "23"
    note: false
    scriptarguments:
      filters: {}
      groupIds:
        complex:
          accessor: labels.resource
          root: incident
          transformers:
          - operator: ParseJSON
          - args:
              field:
                value:
                  simple: data
            operator: getField
          - args:
              field:
                value:
                  simple: groupId
            operator: getField
      groupNames: {}
      region:
        complex:
          accessor: labels.resource
          root: incident
          transformers:
          - operator: ParseJSON
          - args:
              field:
                value:
                  simple: regionId
            operator: getField
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
    separatecontext: false
    task:
      brand: ""
      description: Describes one or more of your security groups.
      id: afabcf10-69da-4cb9-8e1c-973c24359d73
      iscommand: true
      name: Get the latest security group details
      script: '|||aws-ec2-describe-security-groups'
      type: regular
      version: -1
    taskid: afabcf10-69da-4cb9-8e1c-973c24359d73
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 190,
          "y": 975
        }
      }
  "20":
    id: "20"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "9"
    note: false
    separatecontext: false
    task:
      brand: ""
      description: |-
        1. Sign into the AWS console.
        2. Select the specific region from the region drop down on the top right corner.
        3. Navigate to the VPC Dashboard.
        4. Click on Security Groups in the left window pane.
        5. Click on the security group in question.
        6. Make the appropriate changes..
        7. Click Save rules.
      id: 3681e8ec-3ee0-4a3d-8258-4c221cea314a
      iscommand: false
      name: Manually update security group
      type: regular
      version: -1
    taskid: 3681e8ec-3ee0-4a3d-8258-4c221cea314a
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 540,
          "y": 1320
        }
      }
  "21":
    continueonerror: true
    id: "21"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "24"
    note: false
    scriptarguments:
      cidrIp:
        simple: 0.0.0.0/0
      fromPort:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.FromPort
          root: AWS
      groupId:
        complex:
          accessor: EC2.SecurityGroups.GroupId
          root: AWS
      ipProtocol:
        simple: "-1"
      region:
        complex:
          accessor: labels.resource
          root: incident
          transformers:
          - operator: ParseJSON
          - args:
              field:
                value:
                  simple: regionId
            operator: getField
      roleArn: {}
      roleSessionDuration: {}
      roleSessionName: {}
      sourceSecurityGroupName: {}
      toPort:
        complex:
          accessor: EC2.SecurityGroups.IpPermissions.ToPort
          root: AWS
    separatecontext: false
    task:
      brand: ""
      description: Removes an egress rule from a security group. To remove a rule,
        the values that you specify (for example, ports) must match the existing rule's
        values exactly.
      id: b12b6a9d-088a-4dcb-81a2-69f299f063a4
      iscommand: true
      name: Revoke a security group ingress rule permitting all traffic
      script: '|||aws-ec2-revoke-security-group-ingress-rule'
      type: regular
      version: -1
    taskid: b12b6a9d-088a-4dcb-81a2-69f299f063a4
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -90,
          "y": 540
        }
      }
  "23":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                accessor: EC2.SecurityGroups.IpPermissions.IpRanges.CidrIp
                root: AWS
          operator: isEqualString
          right:
            value:
              simple: 0.0.0.0/0
        - left:
            iscontext: true
            value:
              complex:
                accessor: EC2.SecurityGroups.IpPermissions.Ipv6Ranges.CidrIpv6
                root: AWS
          operator: isEqualString
          right:
            value:
              simple: ::/0
      label: "yes"
    id: "23"
    ignoreworker: false
    nexttasks:
      '#default#':
      - "9"
      "yes":
      - "20"
    note: false
    separatecontext: false
    task:
      brand: ""
      description: 'Check for any remaining public security group ingress rules.  If
        one or more rules still exist, you must manually remove them. '
      id: af4dfaed-daff-4ba5-8596-9cf065c06494
      iscommand: false
      name: Any public rules?
      type: condition
      version: -1
    taskid: af4dfaed-daff-4ba5-8596-9cf065c06494
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 190,
          "y": 1145
        }
      }
  "24":
    id: "24"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "18"
    note: false
    scriptarguments:
      seconds:
        simple: "5"
    separatecontext: false
    task:
      brand: ""
      description: Pause for 5 seconds to allow AWS updates.
      id: c7f75cf1-ccc9-4097-8a86-53ae3b735b7b
      iscommand: false
      name: Pause 5 seconds
      script: Sleep
      type: regular
      version: -1
    taskid: c7f75cf1-ccc9-4097-8a86-53ae3b735b7b
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 190,
          "y": 805
        }
      }
  "25":
    id: "25"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "21"
    note: false
    separatecontext: false
    task:
      brand: ""
      id: c2c2f153-2285-4101-869c-9547c5cc9e67
      iscommand: false
      name: SG Overly Permissive To All Traffic
      type: title
      version: -1
    taskid: c2c2f153-2285-4101-869c-9547c5cc9e67
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": -90,
          "y": 390
        }
      }
  "26":
    id: "26"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "16"
    note: false
    separatecontext: false
    task:
      brand: ""
      id: 2b391825-99a6-41ed-8264-edd946845cc3
      iscommand: false
      name: SG Allows Internet Traffic
      type: title
      version: -1
    taskid: 2b391825-99a6-41ed-8264-edd946845cc3
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 450,
          "y": 455
        }
      }
  "27":
    id: "27"
    ignoreworker: false
    nexttasks:
      '#none#':
      - "14"
    note: false
    separatecontext: false
    task:
      brand: ""
      id: 20a0adc7-86c1-42c0-839a-3148bbafca74
      iscommand: false
      name: Default SG Does Not Restrict All Traffic
      type: title
      version: -1
    taskid: 20a0adc7-86c1-42c0-839a-3148bbafca74
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 950,
          "y": 390
        }
      }
version: -1
view: |-
  {
    "linkLabelsPosition": {
      "12_20_yes": 0.65,
      "12_9_no": 0.63,
      "14_20_#default#": 0.18,
      "14_3_yes": 0.52,
      "15_25_permissive": 0.55,
      "15_26_pubTraffic": 0.6,
      "15_27_defaultSG": 0.56,
      "23_20_yes": 0.33,
      "23_9_#default#": 0.2
    },
    "paper": {
      "dimensions": {
        "height": 1655,
        "width": 1610,
        "x": -90,
        "y": -90
      }
    }
  }
