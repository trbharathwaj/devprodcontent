args:
- description: The model name (or list name) in Demisto.
  name: modelName
  required: true
- description: Seed for the hash function, at the pre-process stage.
  name: hashSeed
- description: Subject of the email.
  name: emailSubject
- description: Body of the email.
  name: emailBody
- description: HTML body of the email. Only use this field if the emailBody argument
    is empty.
  name: emailBodyHTML
- defaultValue: "20"
  description: 'Maximum number of positive/negative words to return for the model
    decision. '
  name: topWordsLimit
- defaultValue: "0.05"
  description: Threshold to determine word importance (range 0-1).
  name: wordThreshold
- auto: PREDEFINED
  defaultValue: list
  description: How the model is stored in Demisto.
  name: modelStoreType
  predefined:
  - list
  - mlModel
- defaultValue: "5"
  description: Minimum number of characters for the prediction.
  name: minTextLength
- defaultValue: "0.8"
  description: The label probability threshold.
  name: labelProbabilityThreshold
- auto: PREDEFINED
  defaultValue: "true"
  description: Whether to return an error when there is no prediction.
  name: returnError
  predefined:
  - "true"
  - "false"
comment: Predict text label using a pre-trained machine learning phishing model, and
  get the most important words used in the classification decision.
commonfields:
  id: DBotPredictPhishingWords
  version: -1
dockerimage: demisto/dl:1.3
name: DBotPredictPhishingWords
outputs:
- contextPath: DBotPredictPhishingWords.Label
  description: The predicted label.
  type: String
- contextPath: DBotPredictPhishingWords.Probability
  description: The predicted probability (range 0-1).
  type: Number
- contextPath: DBotPredictPhishingWords.PositiveWords
  description: A list of words in the input text that supports the model decision.
  type: Unknown
- contextPath: DBotPredictPhishingWords.NegativeWords
  description: A list of words in the input text that do not support the model decision.
    These words better support a different classification class.
  type: Unknown
- contextPath: DBotPredictPhishingWords.TextTokensHighlighted
  description: The input text (after pre-processing) with the positive words that
    support the model decision.
  type: String
runonce: false
script: |
  # pylint: disable=no-member
  from string import punctuation

  import demisto_ml




  def get_model_data(model_name, store_type, is_return_error):
      res_model_list = demisto.executeCommand("getList", {"listName": model_name})[0]
      res_model = demisto.executeCommand("getMLModel", {"modelName": model_name})[0]

      if is_error(res_model_list) and not is_error(res_model):
          return res_model['Contents']['modelData']
      elif not is_error(res_model_list) and is_error(res_model):
          return res_model_list["Contents"]
      elif not is_error(res_model_list) and not is_error(res_model):
          if store_type == "list":
              return res_model_list["Contents"]
          elif store_type == "mlModel":
              return res_model['Contents']['modelData']
      else:
          handle_error("error reading model %s from Demisto" % model_name, is_return_error)


  def handle_error(message, is_return_error):
      if is_return_error:
          return_error(message)
      else:
          demisto.results(message)
          sys.exit(1)


  def predict_phishing_words(model_name, model_store_type, email_subject, email_body, min_text_length, label_threshold,
                             word_threshold, top_word_limit, is_return_error):
      model_data = get_model_data(model_name, model_store_type, is_return_error)
      model = demisto_ml.decode_model(model_data)
      text = "%s %s" % (email_subject, email_body)
      res = demisto.executeCommand('WordTokenizerNLP', {'value': text,
                                                        'hashWordWithSeed': demisto.args().get('hashSeed')})
      if is_error(res[0]):
          handle_error(res[0]['Contents'], is_return_error)
      tokenized_text_result = res[0]['Contents']
      input_text = tokenized_text_result['hashedTokenizedText'] if tokenized_text_result.get('hashedTokenizedText') else \
          tokenized_text_result['tokenizedText']
      filtered_text, filtered_text_number_of_words = demisto_ml.filter_model_words(input_text, model)
      if filtered_text_number_of_words == 0:
          handle_error("The model does not contains any of the input text words", is_return_error)
      if filtered_text_number_of_words < min_text_length:
          handle_error("The model contains less then %d words" % min_text_length, is_return_error)

      explain_result = demisto_ml.explain_model_words(model,
                                                      input_text,
                                                      0,
                                                      word_threshold,
                                                      top_word_limit)
      if explain_result["Probability"] < label_threshold:
          handle_error("Label probability is {:.2f} and it's below the input threshold".format(
              explain_result["Probability"]), is_return_error)

      if tokenized_text_result.get('hashedTokenizedText'):
          words_to_token_maps = tokenized_text_result['wordsToHashedTokens']
      else:
          words_to_token_maps = tokenized_text_result['originalWordsToTokens']
      positive_tokens = set([''.join(c for c in word if c.isalnum()) for word in explain_result['PositiveWords']])
      negative_tokens = set([''.join(c for c in word if c.isalnum()) for word in explain_result['NegativeWords']])
      positive_words = find_words_contain_tokens(positive_tokens, words_to_token_maps)
      negative_words = find_words_contain_tokens(negative_tokens, words_to_token_maps)
      positive_words = [s.strip(punctuation) for s in positive_words]
      negative_words = [s.strip(punctuation) for s in negative_words]

      if len(positive_words) > 0:
          res = demisto.executeCommand('HighlightWords', {'text': tokenized_text_result['originalText'],
                                                          'terms': ",".join(positive_words)})
          res = res[0]
          if not is_error(res):
              highlighted_text_markdown = res['Contents']
          else:
              highlighted_text_markdown = tokenized_text_result['originalText'].strip()
      else:
          highlighted_text_markdown = tokenized_text_result['originalText'].strip()

      explain_result['PositiveWords'] = positive_words
      explain_result['NegativeWords'] = negative_words
      explain_result['OriginalText'] = tokenized_text_result['originalText'].strip()
      explain_result['TextTokensHighlighted'] = highlighted_text_markdown

      explain_result_hr = dict()
      explain_result_hr['TextTokensHighlighted'] = highlighted_text_markdown
      explain_result_hr['Label'] = explain_result["Label"]
      explain_result_hr['Probability'] = "%.2f" % explain_result["Probability"]
      explain_result_hr['PositiveWords'] = ", ".join(positive_words)
      explain_result_hr['NegativeWords'] = ", ".join(negative_words)
      return {
          'Type': entryTypes['note'],
          'Contents': explain_result,
          'ContentsFormat': formats['json'],
          'HumanReadable': tableToMarkdown('DBot Predict Phishing Words', explain_result_hr,
                                           headers=['TextTokensHighlighted', 'Label', 'Probability',
                                                    'PositiveWords', 'NegativeWords'],
                                           removeNull=True),
          'HumanReadableFormat': formats['markdown'],
          'EntryContext': {
              'DBotPredictPhishingWords': explain_result
          }
      }


  def find_words_contain_tokens(positive_tokens, words_to_token_maps):
      positive_words = []
      for word, word_in_tokens_list in words_to_token_maps.items():
          if any(token in positive_tokens for token in word_in_tokens_list):
              positive_words.append(word)
      return positive_words


  def main():
      result = predict_phishing_words(demisto.args()['modelName'],
                                      demisto.args()['modelStoreType'],
                                      demisto.args().get('emailSubject', ''),
                                      demisto.args().get('emailBody', '') or demisto.args().get('emailBodyHTML', ''),
                                      int(demisto.args()['minTextLength']),
                                      float(demisto.args().get("labelProbabilityThreshold", 0)),
                                      float(demisto.args().get('wordThreshold', 0)),
                                      int(demisto.args()['topWordsLimit']),
                                      demisto.args()['returnError'] == 'true'
                                      )

      return result


  if __name__ in ['__main__', '__builtin__', 'builtins']:
      demisto.results(main())
scripttarget: 0
subtype: python3
system: true
tags:
- ml
- phishing
type: python
