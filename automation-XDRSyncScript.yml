args:
- description: How often the script will sync incidents between Demisto and XDR (in
    minutes).
  name: interval
  required: true
- defaultValue: xdrincidentid
  description: The ID of incident in XDR.
  name: incident_id
  required: true
- deprecated: true
  description: DEPRECATED
  name: playbook_to_run
- defaultValue: xdrassignedusermail
  description: The assigned_user_mail field name in Demisto.
  name: assigned_user_mail
- defaultValue: xdrassigneduserprettyname
  description: The assigned_user_pretty_name field name in Demisto.
  name: assigned_user_pretty_name
- defaultValue: xdrstatus
  description: The status field name in Demisto.
  name: status
- defaultValue: severity
  description: The severity field name in Demisto.
  name: severity
- defaultValue: xdrresolvecomment
  description: 'The resolve_comment field name in Demisto. '
  name: resolve_comment
- defaultValue: xdralertcount
  description: The alert_count field name in Demisto.
  name: alert_count
- defaultValue: xdrhostcount
  description: The host_count field name in Demisto.
  name: host_count
- defaultValue: xdrdescription
  description: The description field name in Demisto.
  name: description
- defaultValue: xdrurl
  description: The xdr_url field name in Demisto.
  name: xdr_url
- defaultValue: xdrnotes
  description: The notes field name in Demisto.
  name: notes
- defaultValue: xdrlowseverityalertcount
  description: The low_severity_alert_count field name in Demisto.
  name: low_severity_alert_count
- defaultValue: xdrmedseverityalertcount
  description: The med_severity_alert_count field name in Demisto.
  name: med_severity_alert_count
- defaultValue: xdrhighseverityalertcount
  description: The high_severity_alert_count field name in Demisto.
  name: high_severity_alert_count
- defaultValue: xdrusercount
  description: The user_count field name in Demisto.
  name: user_count
- deprecated: true
  description: DEPRECATED
  name: xdr_incident_markdown_field
- auto: PREDEFINED
  defaultValue: "true"
  description: Whether this is the first time this script is running or is scheduled.
    Can be "true" or "false". The default value is "true". There is no need to change
    the value.
  name: first
  predefined:
  - "true"
  - "false"
- description: The user should not modify this argument. This argument should be passed
    from the parent task to the next scheduled task. It should contain the incident's
    JSON from XDR.
  name: xdr_incident_from_previous_run
- auto: PREDEFINED
  defaultValue: "true"
  description: Whether to print messages to the War Room. Can be "true" or "false".
    The default value is "true".
  name: verbose
  predefined:
  - "true"
  - "false"
- defaultValue: xdralerts
  description: The XDR alerts field; must be of type "grid".
  name: xdr_alerts
- defaultValue: xdrfileartifacts
  description: 'The XDR file artifacts field; must be of type "grid". '
  name: xdr_file_artifacts
- defaultValue: xdrnetworkartifacts
  description: The XDR network artifacts field.
  name: xdr_network_artifacts
comment: Syncs a single incident between Demisto and XDR. This script always uses
  the xdr-get-incident-extra-data command and outputs to the context the entire incident
  JSON. When the incident is updated in XDR, the Demisto incident will be updated
  accordingly and the default playbook will rerun. When an incident is updated in
  Demisto, the script will execute the xdr-update-incident command and update the
  incident in XDR.
commonfields:
  id: XDRSyncScript
  version: -1
dockerimage: demisto/python3:3.7.4.977
name: XDRSyncScript
outputs:
- contextPath: PaloAltoNetworksXDR.Incident.incident_id
  description: Unique ID assigned to each returned incident.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.creation_time
  description: Date and time that the incident was created in XDR.
  type: Date
- contextPath: PaloAltoNetworksXDR.Incident.modification_time
  description: Date and time that the incident was last modified.
  type: Date
- contextPath: PaloAltoNetworksXDR.Incident.detection_time
  description: Date and time that the first alert occurred in the incident.
  type: Date
- contextPath: PaloAltoNetworksXDR.Incident.status
  description: |-
    Current status of the incident:
    "new","under_investigation","resolved_threat_handled","resolved_known_issue","resolved_duplicate","resolved_false_positive","resolved_other"
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.severity
  description: Calculated severity of the incident. Can be "low","medium",or "high".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.description
  description: Dynamic calculated description of the incident.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.assigned_user_mail
  description: Email address of the user assigned to the incident.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.assigned_user_pretty_name
  description: Full name of the user assigned to the incident.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alert_count
  description: Total number of alerts in the incident.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.low_severity_alert_count
  description: Number of alerts with the severity LOW.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.med_severity_alert_count
  description: Number of alerts with the severity MEDIUM.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.high_severity_alert_count
  description: Number of alerts with the severity HIGH.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.user_count
  description: Number of users involved in the incident.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.host_count
  description: Number of hosts involved in the incident.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.notes
  description: Comments entered by the user regarding the incident.
  type: Unknown
- contextPath: PaloAltoNetworksXDR.Incident.resolve_comment
  description: Comments entered by the user when the incident was resolved.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.manual_severity
  description: Incident severity assigned by the user. This does not affect the calculated
    severity.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.manual_description
  description: Incident description provided by the user.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.xdr_url
  description: A link to the incident view in XDR.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.starred
  description: Whether the incident was starred.
  type: Boolean
- contextPath: PaloAltoNetworksXDR.Incident.alerts.alert_id
  description: Unique ID for each alert.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.detection_timestamp
  description: Date and time that the alert occurred.
  type: Date
- contextPath: PaloAltoNetworksXDR.Incident.alerts.source
  description: Source of the alert. The product/vendor from which this alert came
    originated.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.severity
  description: Severity of the alert. Can be"low","medium", or "high".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.name
  description: Calculated name of the alert.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.category
  description: Category of the alert, for example, Spyware Detected via Anti-Spyware
    profile.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.description
  description: Textual description of the alert.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.host_ip
  description: Host IP address involved in the alert.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.host_name
  description: Host name involved in the alert.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.user_name
  description: User name involved with the alert.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.event_type
  description: The event type. Can be "Process Execution","Network Event","File Event","Registry
    Event","Injection Event","Load Image Event", or "Windows Event Log".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action
  description: The action that triggered the alert.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_pretty
  description: The action that triggered the alert. Can be "Detected (Reported)",
    "Prevented (Blocked)", "Detected (Post Detected)", "Detected (Scanned)", "Detected
    (Download)", "Detected (Prompt Allow)", "Prevented (Prompt Block)", "Detected",
    "Prevented (Denied The Session)", "Prevented (Dropped The Session)", "Prevented
    (Dropped The Session And Sent a TCP Reset)", "Prevented (Blocked The URL)", "Prevented
    (Blocked The IP)", "Prevented (Dropped The Packet)", "Prevented (Dropped All Packets)",
    "Prevented (Terminated The Session And Sent a TCP Reset To Both Sides Of The Connection)",
    "Prevented (Terminated The Session And Sent a TCP Reset To The Client)", "Prevented
    (Terminated The Session And Sent a TCP Reset To The Server)", "Prevented (Continue)",
    "Prevented (Block-Override)", "Prevented (Override-Lockout)", "Prevented (Override)",
    "Prevented (Random-Drop)", "Prevented (Silently Dropped The Session With An ICMP
    Unreachable Message To The Host Or Application)", "Prevented (Block)", "Detected
    (Allowed The Session)", "Detected (Raised An Alert)", "Detected (Syncookie Sent)",
    "Detected (Forward)", "Detected (Wildfire Upload Success)", "Detected (Wildfire
    Upload Failure)", "Detected (Wildfire Upload Skip)", or "Detected (Sinkhole)".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.actor_process_image_name
  description: The image name.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.actor_process_command_line
  description: The command line.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.actor_process_signature_status
  description: The signature status. Can be "Signed", "Invalid Signature", "Unsigned",
    "Revoked", "Signature Fail", "N/A", or "Weak Hash".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.actor_process_signature_vendor
  description: Singature vendor name.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.causality_actor_process_image_name
  description: The image name.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.causality_actor_process_command_line
  description: The command line.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.causality_actor_process_signature_status
  description: The signature status. Can be "Signed", "Invalid Signature", "Unsigned",
    "Revoked", "Signature Fail", "N/A", or "Weak Hash".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.causality_actor_process_signature_vendor
  description: Signature vendor.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.causality_actor_causality_id
  description: The causality ID.
  type: Unknown
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_process_image_name
  description: The image name.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_process_image_command_line
  description: The command line.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_process_image_sha256
  description: The SHA256 hash of the image.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_process_signature_status
  description: The signature status. Can be "Signed", "Invalid Signature", "Unsigned",
    "Revoked", "Signature Fail", "N/A", or "Weak Hash".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_process_signature_vendor
  description: Signature vendor name.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_file_path
  description: The file path.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_file_md5
  description: The MD5 hash of the file.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_file_sha256
  description: The SHA256 hash of the file.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_registry_data
  description: Registry data.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_registry_full_key
  description: Registry full key.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_local_ip
  description: Local IP address.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_local_port
  description: Local port.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_remote_ip
  description: Remote IP address.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_remote_port
  description: Remote port.
  type: Number
- contextPath: PaloAltoNetworksXDR.Incident.alerts.action_external_hostname
  description: External hostname.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.fw_app_id
  description: Firewall app ID.
  type: Unknown
- contextPath: PaloAltoNetworksXDR.Incident.alerts.is_whitelisted
  description: Whether the alert is whitelisted.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.alerts.starred
  description: Whether the alert is starred.
  type: Boolean
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.type
  description: The network artifact type, for example, IP.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.network_remote_port
  description: The remote port related to the artifact.
  type: number
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.alert_count
  description: Number of alerts related to the artifact.
  type: number
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.network_remote_ip
  description: The remote IP address related to the artifact.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.is_manual
  description: Whether the artifact was created by the user (manually).
  type: boolean
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.network_domain
  description: The domain related to the artifact.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.type
  description: The artifact type, for example, IP.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.network_artifacts.network_country
  description: The country related to the artifact.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.file_signature_status
  description: Digital signature status of the file. Can be "SIGNATURE_UNAVAILABLE",
    "SIGNATURE_SIGNED", "SIGNATURE_INVALID", "SIGNATURE_UNSIGNED", or "SIGNATURE_WEAK_HASH".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.is_process
  description: Whether the file artifact is related to a process execution.
  type: boolean
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.file_name
  description: Name of the file.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.file_wildfire_verdict
  description: The file verdict calculated by Wildfire. Can be "BENIGN", "MALWARE",
    "GRAYWARE", "PHISING", or "UNKNOWN".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.alert_count
  description: Number of alerts related to the artifact.
  type: number
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.is_malicious
  description: Whether the artifact is malicious (according to the Wildfire verdict).
  type: boolean
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.is_manual
  description: Whether the artifact was created by the user (manually).
  type: boolean
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.type
  description: The artifact type. Can be "META", "GID", "CID", "HASH", "IP", "DOMAIN",
    "REGISTRY", or "HOSTNAME".
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.file_sha256
  description: The SHA256 hash of the file.
  type: String
- contextPath: PaloAltoNetworksXDR.Incident.file_artifacts.file_signature_vendor_name
  description: File signature vendor name.
  type: String
runonce: false
script: |2



  from dateutil import parser
  import copy
  from typing import Optional, Dict
  import traceback


  # XDR_FIELDS
  INCIDENT_ID_XDR_FIELD = "incident_id"
  MANUAL_SEVERITY_XDR_FIELD = "manual_severity"
  MANUAL_DESCRIPTION_XDR_FIELD = "manual_description"
  ASSIGNED_USER_MAIL_XDR_FIELD = "assigned_user_mail"
  HIGH_SEVERITY_ALERT_COUNT_XDR_FIELD = "high_severity_alert_count"
  HOST_COUNT_XDR_FIELD = "host_count"
  XDR_URL_XDR_FIELD = "xdr_url"
  ASSIGNED_USER_PRETTY_NAME_XDR_FIELD = "assigned_user_pretty_name"
  ALERT_COUNT_XDR_FIELD = "alert_count"
  MED_SEVERITY_ALERT_COUNT_XDR_FIELD = "med_severity_alert_count"
  USER_COUNT_XDR_FIELD = "user_count"
  SEVERITY_XDR_FIELD = "severity"
  LOW_SEVERITY_ALERT_COUNT_XDR_FIELD = "low_severity_alert_count"
  STATUS_XDR_FIELD = "status"
  DESCRIPTION_XDR_FIELD = "description"
  RESOLVE_COMMENT_XDR_FIELD = "resolve_comment"
  NOTES_XDR_FIELD = "notes"
  CREATION_TIME_XDR_FIELD = "creation_time"
  DETECTION_TIME_XDR_FIELD = "detection_time"
  MODIFICATION_TIME_XDR_FIELD = "modification_time"

  XDR_INCIDENT_FIELDS = [
      INCIDENT_ID_XDR_FIELD,
      MANUAL_SEVERITY_XDR_FIELD,
      MANUAL_DESCRIPTION_XDR_FIELD,
      ASSIGNED_USER_MAIL_XDR_FIELD,
      HIGH_SEVERITY_ALERT_COUNT_XDR_FIELD,
      HOST_COUNT_XDR_FIELD,
      XDR_URL_XDR_FIELD,
      ASSIGNED_USER_PRETTY_NAME_XDR_FIELD,
      ALERT_COUNT_XDR_FIELD,
      MED_SEVERITY_ALERT_COUNT_XDR_FIELD,
      USER_COUNT_XDR_FIELD,
      SEVERITY_XDR_FIELD,
      LOW_SEVERITY_ALERT_COUNT_XDR_FIELD,
      STATUS_XDR_FIELD,
      DESCRIPTION_XDR_FIELD,
      RESOLVE_COMMENT_XDR_FIELD,
      NOTES_XDR_FIELD,
      CREATION_TIME_XDR_FIELD,
      DETECTION_TIME_XDR_FIELD,
      MODIFICATION_TIME_XDR_FIELD
  ]


  def compare_incident_in_demisto_vs_xdr_context(incident_in_demisto, xdr_incident_in_context, incident_id, fields_mapping):
      modified_in_demisto = parser.parse(incident_in_demisto.get("modified")).timestamp() * 1000
      modified_in_xdr_in_context = int(xdr_incident_in_context.get("modification_time"))

      incident_in_demisto_was_modified = False

      xdr_update_args: Dict[str, Optional[str]] = {}
      if modified_in_demisto > modified_in_xdr_in_context:
          if ASSIGNED_USER_MAIL_XDR_FIELD in fields_mapping:
              field_name_in_demisto = fields_mapping[ASSIGNED_USER_MAIL_XDR_FIELD]

              if field_name_in_demisto == "owner":
                  # if the ASSIGNED USER MAIL mapped to Demisto base field owner
                  assigned_user_mail_current = incident_in_demisto.get("owner")
              else:
                  assigned_user_mail_current = incident_in_demisto.get("CustomFields").get(field_name_in_demisto)

              assigned_user_mail_previous = xdr_incident_in_context[ASSIGNED_USER_MAIL_XDR_FIELD]

              if not assigned_user_mail_current and not assigned_user_mail_previous:
                  # do nothing
                  pass

              elif not assigned_user_mail_current and assigned_user_mail_previous:
                  incident_in_demisto_was_modified = True
                  xdr_update_args[ASSIGNED_USER_MAIL_XDR_FIELD] = "none"

              elif assigned_user_mail_current != assigned_user_mail_previous:
                  incident_in_demisto_was_modified = True
                  xdr_update_args[ASSIGNED_USER_MAIL_XDR_FIELD] = assigned_user_mail_current

          if ASSIGNED_USER_PRETTY_NAME_XDR_FIELD in fields_mapping:
              field_name_in_demisto = fields_mapping[ASSIGNED_USER_PRETTY_NAME_XDR_FIELD]
              assigned_user_pretty_name_current = incident_in_demisto.get("CustomFields").get(field_name_in_demisto)
              assigned_user_pretty_name_previous = xdr_incident_in_context[ASSIGNED_USER_PRETTY_NAME_XDR_FIELD]

              if assigned_user_pretty_name_current != assigned_user_pretty_name_previous:
                  incident_in_demisto_was_modified = True
                  xdr_update_args[ASSIGNED_USER_PRETTY_NAME_XDR_FIELD] = assigned_user_pretty_name_current

          if STATUS_XDR_FIELD in fields_mapping:
              field_name_in_demisto = fields_mapping[STATUS_XDR_FIELD]
              status_current = incident_in_demisto.get("CustomFields").get(field_name_in_demisto)
              status_previous = xdr_incident_in_context[STATUS_XDR_FIELD]

              if status_current != status_previous:
                  incident_in_demisto_was_modified = True
                  xdr_update_args[STATUS_XDR_FIELD] = status_current

          if SEVERITY_XDR_FIELD in fields_mapping:
              field_name_in_demisto = fields_mapping[SEVERITY_XDR_FIELD]

              severity_previous = xdr_incident_in_context[SEVERITY_XDR_FIELD]

              if field_name_in_demisto == "severity":
                  # if field mapped to original demisto severity field then we should get it directly from incident
                  severity_current = incident_in_demisto.get(field_name_in_demisto)

                  severity_mapping = {
                      1: "low",
                      2: "medium",
                      3: "high",
                      4: "high"
                  }
                  if severity_current != 0 and severity_mapping[severity_current] != severity_previous:
                      incident_in_demisto_was_modified = True
                      xdr_update_args[MANUAL_SEVERITY_XDR_FIELD] = severity_mapping[severity_current]

              else:
                  severity_current = incident_in_demisto.get("CustomFields").get(field_name_in_demisto)

                  if severity_current != severity_previous:
                      incident_in_demisto_was_modified = True

                      if severity_current is None or severity_current == '':
                          xdr_update_args[MANUAL_SEVERITY_XDR_FIELD] = "none"
                      else:
                          xdr_update_args[MANUAL_SEVERITY_XDR_FIELD] = severity_current

          if RESOLVE_COMMENT_XDR_FIELD in fields_mapping:
              field_name_in_demisto = fields_mapping[RESOLVE_COMMENT_XDR_FIELD]
              resolve_comment_current = incident_in_demisto.get("CustomFields").get(field_name_in_demisto)
              resolve_comment_previous = xdr_incident_in_context[RESOLVE_COMMENT_XDR_FIELD]

              if resolve_comment_current != resolve_comment_previous:
                  incident_in_demisto_was_modified = True
                  xdr_update_args[RESOLVE_COMMENT_XDR_FIELD] = resolve_comment_current

      if not xdr_update_args:
          return False, {}

      xdr_update_args["incident_id"] = incident_id
      return incident_in_demisto_was_modified, xdr_update_args


  def compare_incident_in_xdr_vs_previous_xdr_in_context(incident_in_xdr, xdr_incident_in_context, fields_mapping):
      modified_in_xdr = int(incident_in_xdr.get("modification_time"))
      modified_in_xdr_in_context = int(xdr_incident_in_context.get("modification_time"))
      incident_in_xdr_was_modified = False

      demisto_update_args = {}
      if modified_in_xdr > modified_in_xdr_in_context:
          for field_in_xdr in XDR_INCIDENT_FIELDS:
              if field_in_xdr in fields_mapping:
                  current_value = incident_in_xdr.get(field_in_xdr)
                  previous_value = xdr_incident_in_context.get(field_in_xdr)

                  if not current_value and not previous_value:
                      # both non existing values - ignore
                      pass
                  if current_value != previous_value:
                      incident_in_xdr_was_modified = True
                      field_name_in_demisto = fields_mapping[field_in_xdr]

                      if current_value is None:
                          demisto_update_args[field_name_in_demisto] = ""
                      else:
                          demisto_update_args[field_name_in_demisto] = current_value

      return incident_in_xdr_was_modified, demisto_update_args


  def args_to_str(demisto_args, latest_incident_in_xdr):
      args_to_str = ""
      args_copy = copy.deepcopy(demisto_args)

      if isinstance(latest_incident_in_xdr, dict):
          args_copy["xdr_incident_from_previous_run"] = json.dumps(latest_incident_in_xdr)

      args_copy["first"] = "false"

      for arg_key in args_copy:
          arg_value = args_copy[arg_key]
          args_to_str += '{}=`{}` '.format(arg_key, arg_value)

      return args_to_str


  def get_latest_incident_from_xdr(incident_id):
      # get the latest incident from xdr
      latest_incident_in_xdr_result = demisto.executeCommand("xdr-get-incident-extra-data", {"incident_id": incident_id})
      if is_error(latest_incident_in_xdr_result):
          raise ValueError("Failed to execute xdr-get-incident-extra-data command. Error: {}".format(
              get_error(latest_incident_in_xdr_result)))

      latest_incident_in_xdr = latest_incident_in_xdr_result[0]["Contents"].get("incident")
      # no need to pass the whole incident with extra data - it will be too big json to pass
      # just the basic incident details
      if 'alerts' in latest_incident_in_xdr:
          del latest_incident_in_xdr['alerts']
      if 'file_artifacts' in latest_incident_in_xdr:
          del latest_incident_in_xdr['file_artifacts']
      if 'network_artifacts' in latest_incident_in_xdr:
          del latest_incident_in_xdr['network_artifacts']

      latest_incident_in_xdr_markdown = latest_incident_in_xdr_result[0]["HumanReadable"]
      if not latest_incident_in_xdr:
          raise ValueError("Error - for some reason xdr-get-incident-extra-data didn't return any incident from xdr "
                           "with id={}".format(incident_id))

      return latest_incident_in_xdr_result, latest_incident_in_xdr, latest_incident_in_xdr_markdown


  def xdr_incident_sync(incident_id, fields_mapping, xdr_incident_from_previous_run, first_run, xdr_alerts_field,
                        xdr_file_artifacts_field, xdr_network_artifacts_field, incident_in_demisto, verbose=True):

      latest_incident_in_xdr_result, latest_incident_in_xdr, latest_incident_in_xdr_markdown = \
          get_latest_incident_from_xdr(incident_id)

      if first_run:
          xdr_incident_from_previous_run = latest_incident_in_xdr
      else:
          if xdr_incident_from_previous_run:
              xdr_incident_from_previous_run = json.loads(xdr_incident_from_previous_run)
          else:
              raise ValueError("xdr_incident_from_previous_run expected to contain incident JSON, but passed None")

      incident_in_demisto_was_modified, xdr_update_args = compare_incident_in_demisto_vs_xdr_context(
          incident_in_demisto,
          xdr_incident_from_previous_run,
          incident_id, fields_mapping)

      if incident_in_demisto_was_modified:
          # update xdr and finish the script
          demisto.debug("the incident in demisto was modified, updating the incident in xdr accordingly. ")
          demisto.debug("xdr_update_args: {}".format(json.dumps(xdr_update_args, indent=4)))
          res = demisto.executeCommand("xdr-update-incident", xdr_update_args)
          if is_error(res):
              raise ValueError(get_error(res))

          latest_incident_in_xdr_result, latest_incident_in_xdr, latest_incident_in_xdr_markdown = \
              get_latest_incident_from_xdr(incident_id)

          xdr_incident = latest_incident_in_xdr_result[0]['Contents']
          update_incident = dict()
          update_incident[xdr_alerts_field] = replace_in_keys(xdr_incident.get('alerts').get('data', []), '_', '')
          update_incident[xdr_file_artifacts_field] = replace_in_keys(xdr_incident.get('file_artifacts').get('data', []),
                                                                      '_', '')
          update_incident[xdr_network_artifacts_field] = replace_in_keys(xdr_incident.get('network_artifacts').get('data',
                                                                                                                   []),
                                                                         '_', '')

          res = demisto.executeCommand("setIncident", update_incident)
          if is_error(res):
              raise ValueError(get_error(res))

          # update the context with latest incident from xdr
          demisto.results(latest_incident_in_xdr_result)

          if verbose:
              return_outputs(
                  "Incident in Demisto was modified, updating incident in XDR accordingly.\n\n{}".format(xdr_update_args),
                  None)

          return latest_incident_in_xdr

      incident_in_xdr_was_modified, demisto_update_args = compare_incident_in_xdr_vs_previous_xdr_in_context(
          latest_incident_in_xdr,
          xdr_incident_from_previous_run,
          fields_mapping)

      if incident_in_xdr_was_modified:
          demisto.debug("the incident in xdr was modified, updating the incident in demisto")
          demisto.debug("demisto_update_args: {}".format(json.dumps(demisto_update_args, indent=4)))
          xdr_incident = latest_incident_in_xdr_result[0]['Contents']

          demisto_update_args[xdr_alerts_field] = replace_in_keys(xdr_incident.get('alerts').get('data', []), '_', '')
          demisto_update_args[xdr_file_artifacts_field] = replace_in_keys(
              xdr_incident.get('file_artifacts').get('data', []), '_', '')

          demisto_update_args[xdr_network_artifacts_field] = replace_in_keys(
              xdr_incident.get('network_artifacts').get('data', []), '_', '')

          res = demisto.executeCommand("setIncident", demisto_update_args)
          if is_error(res):
              raise ValueError(get_error(res))

          demisto.results(latest_incident_in_xdr_result)
          if verbose:
              return_outputs(
                  "Incident in XDR was modified, updating incident in Demisto accordingly.\n\n{}".format(demisto_update_args),
                  None)

          # rerun the playbook the current playbook
          demisto.executeCommand("setPlaybook", {})
          return latest_incident_in_xdr

      if first_run:
          demisto.results(latest_incident_in_xdr_result)

          # set the incident markdown field
          xdr_incident = latest_incident_in_xdr_result[0]['Contents']
          update_incident = dict()
          update_incident[xdr_alerts_field] = replace_in_keys(xdr_incident.get('alerts').get('data', []), '_', '')
          update_incident[xdr_file_artifacts_field] = replace_in_keys(xdr_incident.get('file_artifacts').get('data', []),
                                                                      '_', '')
          update_incident[xdr_network_artifacts_field] = replace_in_keys(xdr_incident.get('network_artifacts').get('data',
                                                                                                                   []),
                                                                         '_', '')

          demisto.results(update_incident)
          res = demisto.executeCommand("setIncident", update_incident)
          if is_error(res):
              raise ValueError(get_error(res))

          if verbose:
              return_outputs("Nothing to sync.", None)

          return latest_incident_in_xdr


  def main(args):
      fields_mapping = {}
      for xdr_field in XDR_INCIDENT_FIELDS:
          if xdr_field in args and args.get(xdr_field) is not None:
              custom_field_in_demisto = args.get(xdr_field)
              fields_mapping[xdr_field] = custom_field_in_demisto

      incident_id = args.get('incident_id')
      first_run = args.get('first') == 'true'
      interval = int(args.get('interval'))
      xdr_incident_from_previous_run = args.get('xdr_incident_from_previous_run')
      xdr_alerts_field = args.get('xdr_alerts')
      xdr_file_artifacts_field = args.get('xdr_file_artifacts')
      xdr_network_artifacts_field = args.get('xdr_network_artifacts')
      verbose = args.get('verbose') == 'true'

      # get current running incident
      incident_in_demisto = demisto.incidents()[0]
      if not incident_in_demisto:
          raise ValueError("Error - demisto.incidents()[0] expected to return current incident "
                           "from context but returned None")

      xdr_incident_markdown_field = args.get('xdr_incident_markdown_field')  # deprecated
      if xdr_incident_markdown_field:
          # deprecated field
          return_error('Deprecated xdr_incident_markdown_field argument, instead use xdr_alerts, xdr_file_artifacts, '
                       'xdr_network_artifacts. For more information follow Demisto documentation.', None)

      latest_incident_in_xdr = None

      previous_scheduled_task_id = demisto.get(demisto.context(), 'XDRSyncScriptTaskID')
      if first_run and previous_scheduled_task_id:
          # it means someone rerun the playbook, so we stop the previous scheduled task and set the task ID to be empty.
          if verbose:
              demisto.debug('Stopping previous scheduled task with ID: {}'.format(previous_scheduled_task_id))

          demisto.executeCommand('StopScheduledTask', {'taskID': previous_scheduled_task_id})
          demisto.setContext('XDRSyncScriptTaskID', '')

      try:
          latest_incident_in_xdr = xdr_incident_sync(incident_id, fields_mapping, xdr_incident_from_previous_run,
                                                     first_run, xdr_alerts_field, xdr_file_artifacts_field,
                                                     xdr_network_artifacts_field, incident_in_demisto, verbose)
      except Exception as ex:
          if verbose:
              raise

          demisto.error(traceback.format_exc())
          return_error(str(ex), ex)
      finally:
          # even if error occurred keep trigger sync
          if latest_incident_in_xdr is None:
              args = args_to_str(args, xdr_incident_from_previous_run)
          else:
              args = args_to_str(args, latest_incident_in_xdr)

          res = demisto.executeCommand("ScheduleCommand", {
              'command': '''!XDRSyncScript {}'''.format(args),
              'cron': '*/{} * * * *'.format(interval),
              'times': 1
          })

          if is_error(res):
              # return the error entries to warroom
              demisto.results(res)
              return

          scheduled_task_id = res[0]["Contents"].get("id")
          demisto.setContext("XDRSyncScriptTaskID", scheduled_task_id)

          if verbose:
              demisto.results("XDRSyncScriptTaskID: {}".format(scheduled_task_id))


  if __name__ == 'builtins':
      main(demisto.args())
scripttarget: 0
subtype: python3
system: true
tags:
- xdr
type: python
