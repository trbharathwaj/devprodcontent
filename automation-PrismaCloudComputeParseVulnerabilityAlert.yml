args:
- description: The vulneribility alert raw JSON data
  name: alert_raw_json
  required: true
comment: Parse Vulnerability alert raw JSON data
commonfields:
  id: PrismaCloudComputeParseVulnerabilityAlert
  version: -1
dockerimage: demisto/python3:3.7.4.2245
name: PrismaCloudComputeParseVulnerabilityAlert
outputs:
- contextPath: PrismaCloudCompute.VulnerabilityAlert.time
  description: Vulnerability discovery time
  type: Date
- contextPath: PrismaCloudCompute.VulnerabilityAlert.imageName
  description: Impacted image name
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.distroName
  description: Full name of the image distribution
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.vulnerabilities.cve
  description: CVE ID of the vulnerability
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.vulnerabilities.severity
  description: The Severity of the vulnerability
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.vulnerabilities.link
  description: The CVE vendor link
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.vulnerabilities.status
  description: The CVE vendor status
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.vulnerabilities.packages
  description: Package names
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.vulnerabilities.packageVersion
  description: The version of the package that caused the vulnerability
  type: String
- contextPath: PrismaCloudCompute.VulnerabilityAlert.vulnerabilities.sourcePackage
  description: The name of the source package if such package exist, for os packages,
    source package is the package used to build the binary
  type: String
runonce: false
script: |2


  import json


  def parse_vulnerability(raw_json):
      data = json.loads(raw_json)

      if data.get('kind') != 'vulnerability':
          raise ValueError(f'Input should be a raw JSON vulnerability alert, received: {raw_json}')

      outputs = {'PrismaCloudCompute.VulnerabilityAlert': data}

      # remove unneeded fields from human readable results
      headers: list = []
      for field in data.keys():
          if field not in ['_id', 'kind', 'vulnerabilities']:
              headers.append(field)
      headers.sort()

      readable_outputs = tableToMarkdown('Vulnerability Information',
                                         data,
                                         headers=headers)

      # add another table for vulnerabilities
      readable_outputs += tableToMarkdown('Vulnerabilities', data.get('vulnerabilities'))

      return (
          readable_outputs,
          outputs,
          raw_json
      )


  def main():
      try:
          return_outputs(*parse_vulnerability(demisto.args().get('alert_raw_json', '')))
      except Exception as ex:
          return_error(f'Failed to execute PrismaCloudComputeParseVulnerabilityAlert. Error: {str(ex)}')


  if __name__ in ('__builtin__', 'builtins'):
      main()
scripttarget: 0
subtype: python3
system: true
tags:
- Prisma Cloud Compute
type: python
